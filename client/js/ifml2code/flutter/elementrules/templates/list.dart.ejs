import 'dart:async';
import 'package:flutter/material.dart';
import '../commands.dart';
import '../repositories/<%=collection %>.dart';
<% if (selection) { -%>
import '../events/<%=selection.id %>.dart' as Selected;
<% }
   for (var i = 0; i < events.length; i++) { -%>
import '../events/<%=events[i].id %>.dart' as E<%=i %>;
<% } -%>

enum _Status {clear, ready, computed}

class ViewElement extends StatefulWidget {
  const ViewElement();
  static const String id = '<%=id %>';

  // TODO: inject
  final Repository repository = const Repository();

  @override
  _ViewElementState createState() => new _ViewElementState();
}

class _ViewElementState extends State<ViewElement> {
  CommandsBroker broker;
  StreamSubscription sub;

  _Status _status = _Status.ready;
  Map<String, String> _filters;
  List<Map<String, String>> _items;
  Map<String, String> _selected;

  final List<PropagateCallback> _propagateCallbacks = <PropagateCallback>[];

<% if (incomings.length) { -%>
  Future _propagate() async {
    await Future.wait([
<%     for (var i = 0; i < incomings.length; i++) { -%>
      () async {
        final Completer<Map<String, String>> completer =
            new Completer<Map<String, String>>();
        broker.add(new PropagateCommand('<%=incomings[i].source %>', completer.complete));
        final Map<String, String> partial = await completer.future;
<%         var bindings = incomings[i].bindings;
           for (var k = 0; k < bindings.length; k++) { -%>
        _filters['<%=bindings[k].input %>'] = _filters['<%=bindings[k].input %>'] ?? partial['<%=bindings[k].output %>'];
<%         } -%>
      }(),
<%     } -%>
    ]);
    setState(() {
      _status = _Status.ready;
    });
    await _compute();
  }

<% } -%>
  Future _compute() async {
    final List<Map<String, String>> items = (await widget.repository.find(_filters)).toList();
    final Map<String, String> selected = items.isNotEmpty ? items.first : <String, String>{};
    setState(() {
      _status = _Status.computed;
      _items = items;
      _selected = selected;
    });
    _propagateCallbacks.forEach((callback) => callback(_selected));
    _propagateCallbacks.clear();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final Commands commands = Commands.of(context);
    if (commands.broker == broker) {
      return;
    }
    if (broker != null) {
      broker.unregister(ViewElement.id);
      sub.cancel();
    }
    broker = commands.broker;
    sub = broker.stream
      .where((c) => c.target == ViewElement.id)
      .listen((c) {
        if (c is SetCommand) {
          setState(() {
<% if (incomings.length) { -%>
            _filters = new Map<String, String>.from(c.input);
            _status = _Status.clear;
<% } else { -%>
            _filters = c.input;
            _status = _Status.ready;
<% } -%>
            _status = _Status.ready;
            _items = null;
          });
<% if (incomings.length) { -%>
          _propagate();
<% } else { -%>
          _compute();
<% } -%>
        } else if (c is PropagateCommand) {
          if (_status == _Status.computed) {
            c.callback(_selected);
          } else {
            _propagateCallbacks.add(c.callback);
          }
        }
      });
    broker.register(ViewElement.id);
  }

  @override
  void dispose() {
    super.dispose();
    broker.unregister(ViewElement.id);
    broker = null;
    sub.cancel();
  }

  @override
  Widget build(BuildContext context) {
    final CommandsBroker broker = Commands.of(context).broker;
    final List<Widget> tiles = <Widget> [
      const ListTile(title: const Text('<%=name %>',
        style: const TextStyle(fontWeight: FontWeight.bold))),
    ];
    tiles.addAll((_items ?? const []).map((item) => new Container(
      child: new Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: <Widget> [
<% if (fields.length === 1) { -%>
          new ListTile(
            title: new Text(item['<%= fields[0] %>']),
            onTap: () {
              setState((){
                _selected = item;
              });
<%     if (selected) {
           if (selected.bindings && selected.bindings.length) { -%>
              Selected.invoke(broker, _selected);
<%         } else { -%>
              Selected.invoke(broker);
<%         }
       } -%>
            },
          ),
<% } else { -%>
          new ListTile(
            title: new Text('Item ' + item['id']),
            onTap: () {
              setState((){
                _selected = item;
              });
<%     if (selected) {
            if (selected.bindings && selected.bindings.length) { -%>
              Selected.invoke(broker, _selected);
<%         } else { -%>
              Selected.invoke(broker);
<%         }
            } -%>
            },
          ),
<%      for (var i = 0; i < fields.length; i++) { -%>
          const Text('<%=fields[i] %>',
            style: const TextStyle(fontWeight: FontWeight.bold)),
          new Text(item['<%=fields[i] %>']),
<%     }
   }
   if (events.length) { -%>
          new ButtonBar(
           children: <Widget>[
<%     for (var i = 0; i < events.length; i++) { -%>
              new FlatButton(
<%         if (events[i].bindings && events[i].bindings.length) { -%>
                onPressed: () => E<%=i %>.invoke(broker, item),
<%         } else { -%>
                onPressed: () => E<%=i %>.invoke(broker),
<%         } -%>
                child: const Text('<%=events[i].name %>')
              ),
<%     } -%>
            ]
          )
<% } -%>
        ]
      )
    )));
    return new Card(
      child: new Container(
        child: new Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: ListTile.divideTiles(
            context: context,
            tiles: tiles
          ).toList()
        )
      )
    );
  }
}
